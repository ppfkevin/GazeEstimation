import cv2
import glob
import numpy as np

img = cv2.imread('F:\images\SJTUGaze\Pang_data\P05\Eyetracking\GP1\Samples\p05_91.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#Arrays to store object points and image points from all the images
objpoints = []#np.zeros((1, 6, 3))  # 3d point in real world space
imgpoints = []#np.zeros((1, 6, 1, 2))  # 2d points in image plane
R_wb = np.array([
    [0, -1, 0],
    [1,0, 0],
    [0, 0, 1]
])
T_wb = np.array([585, 0, 0])

objpoints.append(np.array([[494.18, 415.3, 1700.3], [564.14, 407.02,1690.88],[491.54, 415.93, 1703.56], [561.57, 407.46, 1692.11],\
 [486.4, 407.93, 1690.63], [556.57, 412.12, 1700.35]]).astype('float32'))   #P01
objpoints.append(np.array([[464.49, 367.09, 1782.83], [531.02, 373.55, 1785.47], [460.52, 360.1,1770.69], [527.36,365.18,1771.56], \
    [450.36, 357.41, 1774.73], [517.13, 362.48, 1770.74]]).astype('float32'))   #P02
objpoints.append(np.array([[478.14,407.29,1753.86], [545.57,407.72,1755.98], [479.82, 408.21, 1755.1], [547.24, 406.11, 1758.42], \
    [476.15,405.64,1750.54], [543.73,401.96,1751.15]]).astype('float32'))   #P04
objpoints.append(np.array([[490.61,368.47,1681.12], [556.19,365.64,1683.44], [465.56,370.78,1687.34], [531.11,371.06,1687.74], \
    [464.59,367.42,1681], [529.83,368.34,1682.93]]).astype('float32'))      #P05
objpoints.append(np.array([[465.08,386.09,1610.99], [524.89,381.69,1609.63], [459.03,380.79,1608.71], [518.85,378.38,1607], \
    [457.96,381.48,1610.69], [517.53,378.59,1608.29]]).astype('float32'))      #P06
objpoints.append(np.array([[516.04,377.16,1725.29], [582.51,381,1722.21], [507.13,379.29,1718.01], [573.37,383.82,1722.39], \
    [493.41,382.32,1727.46], [559.66,388.45,1723.2]]).astype('float32'))        #P07
objpoints.append(np.array([[468.33,354.45,1630.92], [532.87,354.19,1635.82], [460.95,351.33,1621.04], [525.25,352.79,1623.9], \
    [458.43,352.73,1622.7], [522.86,354.68,1624.52]]).astype('float32'))        #P08
objpoints.append(np.array([[509.34, 433.19, 1582.34], [574.52, 432.53, 1584.38], [511.29, 428.26, 1579.57], [576.48, 427.47, 1582.28],\
    [509.37, 426.87, 1578.79], [574, 425.56, 1579.41]]).astype('float32'))   #P09
objpoints.append(np.array([[495.53, 398.96, 1551.01], [564.23, 399.05, 1546.86], [486.87,402.24,1566.11], [555.39,402.9,1559.87], \
    [484.14,402.07,1568.19], [552.38,402.64,1560.53]]).astype('float32'))       #P10
objpoints.append(np.array([[505.05,402.93,1516.67], [568.73,400.77,1518.07], [524.37,402.46,1507.11], [587.75,396.71,1508.47], \
    [519.51,405.71,1514.17], [583.18,401.59,1413.5]]).astype('float32'))        #P11
objpoints.append(np.array([[479.68,429.03,1662.33], [545.43,433.85,1665.56], [479.48,429.06,1663.5], [545.46,433.97,1666.35], \
    [476.32,426.84,1663.28], [542.13,432.02,1664.53]]).astype('float32'))       #P12
objpoints.append(np.array([[501.5,404.01,1554.73], [568.77,402.55,1552.26], [505.36,406.99,1559.9], [572.97,404.76,1558], \
    [506.8,408.36,1560.41], [574.13,406.09,1559.48]]).astype('float32'))        #P13
objpoints.append(np.array([[456.08, 345.24, 1616.39], [518.72, 341.28, 1617.01], [464.61,343.47,1614.31], [526.84,338.54,1620.1], \
    [457.38, 345.4, 1617.1], [519.95, 340.46, 1617.9]]).astype('float32'))      #P14
objpoints.append(np.array([[467.77, 374.09, 1406.5], [536.35, 377.88, 1402.23], [463.73, 370.37, 1404.82], [532.08, 375.81, 1398.84], \
    [462.11,370.41,1407.27], [530.49, 374.85, 1397.91]]).astype('float32'))		#P15
objpoints.append(np.array([[505.62, 395.89, 1345.3], [570.23, 391.57, 1342.94], [509.09, 393.92, 1345.54], [573.72, 389.15, 1344.57], \
    [509.87, 393.33, 1345.73], [574.31, 386.97, 1344.46]]).astype('float32'))   #P16
cnt = 0
for i in range(len(objpoints)):
     for k in range(len(objpoints[0])):
          objpoints[i][k] = np.dot(R_wb, objpoints[i][k]) + T_wb
          cnt = cnt + 1

imgpoints.append(np.array([[[711,291]], [[746,291]], [[713,291]], [[747,292]], [[716,291]], [[748,293]]]).astype('float32'))	#P01
imgpoints.append(np.array([[[721,317]], [[751,320]], [[727,318]], [[757,322]], [[730,319]], [[759,322]]]).astype('float32'))	#P02
imgpoints.append(np.array([[[711,472]], [[740,474]], [[708,473]], [[740,474]], [[711,474]], [[743,474]]]).astype('float32'))		#P04
imgpoints.append(np.array([[[665,479]], [[695,478]], [[678,476]], [[709,478]], [[678,477]], [[708,480]]]).astype('float32'))	#P05
imgpoints.append(np.array([[[683,463]], [[709,462]], [[684,464]], [[714,463]], [[685,463]], [[716,464]]]).astype('float32'))		#P06
imgpoints.append(np.array([[[642,483]], [[673,486]], [[658,474]], [[689,478]], [[663,472]], [[695,476]]]).astype('float32'))		#P07
imgpoints.append(np.array([[[692,338]], [[726,338]], [[696,339]], [[730,339]], [[701,337]], [[731,341]]]).astype('float32'))		#P08
imgpoints.append(np.array([[[675,294]], [[705,296]], [[673,297]], [[704,298]], [[675,297]], [[705,299]]]).astype('float32'))		#P09
imgpoints.append(np.array([[[682,385]], [[714,388]], [[678,385]], [[712,386]], [[682,385]], [[715,386]]]).astype('float32'))		#P10
imgpoints.append(np.array([[[676,377]], [[708,378]], [[664,380]], [[694,378]], [[666,379]], [[697,378]]]).astype('float32'))		#P11
imgpoints.append(np.array([[[688,383]], [[717,387]], [[686,384]], [[716,388]], [[687,385]], [[717,388]]]).astype('float32'))		#P12
imgpoints.append(np.array([[[661,254]], [[697,257]], [[658,253]], [[695,255]], [[661,253]], [[696,254]]]).astype('float32'))		#P13
imgpoints.append(np.array([[[681,292]], [[713,292]], [[677,294]], [[708,293]], [[682,293]], [[713,293]]]).astype('float32'))	#P14
imgpoints.append(np.array([[[719,442]], [[758,447]], [[721,444]], [[761,448]], [[721,443]], [[758,448]]]).astype('float32'))	#P15
imgpoints.append(np.array([[[700,426]], [[737,424]], [[700,428]], [[736,425]], [[699,429]], [[736,428]]]).astype('float32'))	#P16
imgpoints = np.dot(imgpoints, 2).astype('float32')
#标定
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape,\
                                                   cameraMatrix=np.array([[1466.702320, 0.000000, 1352.100829],[0.000000, 1448.993847, 767.725791],[0.000000, 0.000000, 1.000000]]),\
                                                   distCoeffs=np.array([0.007613, -0.151409, 0.001544, 0.000932, 0.196205]),\
                                                   flags= cv2.CALIB_USE_INTRINSIC_GUESS)

R = np.zeros((len(imgpoints), 3, 3), dtype=np.float64)
for i in range(len(imgpoints)):
    cv2.Rodrigues(rvecs[i].squeeze()[np.newaxis, np.newaxis, :], R[i])
print(1)